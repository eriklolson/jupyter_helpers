#!/usr/bin/env python3

# Import standard libraries
import os        # for interacting with the file system
import shutil    # for copying files
import sys       # for accessing command-line arguments


# List of new filenames to generate from the template
FILENAMES = ["0.Overview", "0.0 Template", "1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9."]

# Name of the template file we want to copy
TEMPLATE_FILENAME = "0.Template.ipynb"

# This is the base folder where we'll start looking for the project
# You can change this if your project is in a different location
SEARCH_ROOT = os.path.expanduser("~/Workspace/jupyter")  # ~ means your home directory


# Function to find the project folder
def find_project_dir(start_path, target_file):
    """
    Recursively searches for the directory containing the template file.
    Args:
        start_path (str): The folder to start searching from (like a base directory).
        target_file (str): The filename we are trying to find.
    Returns:
        str: The full path to the directory that contains the file, or None if not found.
    """
    # os.walk() goes through all folders and subfolders starting from start_path
    for root, dirs, files in os.walk(start_path):
        if target_file in files:
            return root  # Return the directory as soon as we find the file
    # Only reached if no match found. If not found at all, return None
    return None  


# Main function (runs when script is executed)
def main():
    # Make sure the user provided a subdirectory name via the command line
    if len(sys.argv) != 2:
        print("Usage: cp-jup-temp <destination-subdir>")
        sys.exit(1)  # Exit the program if no valid argument is given

    # Grab the user-supplied destination folder name
    subdir = sys.argv[1]

    # Call the function to find the directory that has the template file
    project_dir = find_project_dir(SEARCH_ROOT, TEMPLATE_FILENAME)
    
    # If we couldn't find the template file, print an error and stop
    if not project_dir:
        print(f"‚ùå Could not find '{TEMPLATE_FILENAME}' under {SEARCH_ROOT}")
        sys.exit(1)

    # Full path to the actual template file we found
    source_file = os.path.join(project_dir, TEMPLATE_FILENAME)

    # Full path to the new subdirectory where we want to copy files
    dest_dir = os.path.join(project_dir, subdir)

    # Make the destination folder if it doesn't already exist
    os.makedirs(dest_dir, exist_ok=True)

    # üìù Loop through the filenames and copy the template file with each new name
    for name in FILENAMES:
        dest_path = os.path.join(dest_dir, f"{name}.ipynb")  # Full path to new file
        shutil.copy(source_file, dest_path)  # Copy file

    # ‚úÖ Print success message
    print(f"‚úÖ Copied template into: {dest_dir}")

# üëá This checks if this file is being run directly
if __name__ == "__main__":
    main()
